#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass heb-article
\begin_preamble
\usepackage{culmus}

% Convert the Lyx colors into more pleasent colors:
\usepackage{xcolor}
\definecolor{blue}{RGB}{14,107,217}
\definecolor{green}{RGB}{0,158,40}
\definecolor{red}{RGB}{235,16,16}
\definecolor{brown}{RGB}{164,66,0}
\definecolor{orange}{RGB}{231,135,26}
\definecolor{purple}{RGB}{94,53,177}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language hebrew
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 2cm
\rightmargin 1cm
\bottommargin 3cm
\headheight 0cm
\headsep 0cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
שאלה
\family roman
\series bold
\shape up
\size larger
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\numeric on
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
2
\end_layout

\begin_layout Subsection*
)א(
\end_layout

\begin_layout Standard
נשתמש בתור של 
\begin_inset Formula $max\ heap$
\end_inset

.
 כל ערימה תיוצג באמצעות מערך בגודל 
\begin_inset Formula $k$
\end_inset

 אליו מתווספים האנשים בתור, וכאשר הוא מתמלא תיווצר ממנו ערימה שתייצג 
\begin_inset Quotes eld
\end_inset

חדר המתנה
\begin_inset Quotes erd
\end_inset

 עתידי.
\end_layout

\begin_layout Standard
כאשר אדם נקרא למתקן וחדר ההמתנה ריק, תישלף הערימה הבאה בתור ותהפוך להיות
 חדר ההמתנה החדש, אם אפשרי.
\end_layout

\begin_layout Standard

\series bold
\bar under
המבנה יכלול את השדות הבאים:
\end_layout

\begin_layout Standard
\begin_inset Formula $line$
\end_inset

 - תור של 
\begin_inset Formula $max\ heap$
\end_inset

.
 כל ערימה תיוצג כעץ כמעט מלא באמצעות מערך של מספרים.
 ניתן לעשות זאת כיוון שיש לנו חסם על גודל האיברים בכל ערימה - בחדר המתנה
 תקין יהיו בדיוק 
\begin_inset Formula $k$
\end_inset

 אנשים.
 אנשים חדשים תמיד יתווספו למערך האחרון בתור.
\end_layout

\begin_layout Standard
\begin_inset Formula $waiting\_room$
\end_inset

 - מצביע ל 
\begin_inset Formula $max\ heap$
\end_inset

 שייצג את חדר ההמתנה הנוכחי.
\end_layout

\begin_layout Standard

\series bold
\bar under
המבנה יכלול גם את הפעולות הבאות:
\end_layout

\begin_layout Standard
\begin_inset Formula $Init(k)$
\end_inset

 - אתחול תור ריק ומצביע ריק, מתבצע ב 
\begin_inset Formula $O(1)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $AddToQueue(h)$
\end_inset

 - הוספת אדם בגובה 
\begin_inset Formula $h$
\end_inset

 לתור, כלומר למיקום האחרון במערך האחרון בתור 
\begin_inset Formula $line$
\end_inset

.
 ניתן לשמור מצביע לאיבר האחרון בתור ומשתנה הסופר את המיקום אליו צריך להתווסף
 האדם הנוכחי במערך, ובכך הגישה למערך עצמו ולמיקום הנוכחי בתוכו תתבצע ב
\begin_inset Formula $O(1)$
\end_inset

.
 
\end_layout

\begin_layout Standard
לאחר שהוכנסו 
\begin_inset Formula $k$
\end_inset

 אנשים למערך האחרון, נשתמש בפעולה 
\begin_inset Formula $Make\ Heap$
\end_inset

 שנלמדה בתרגול.
 כידוע מהתרגול, הפעלה של פעולה זו על מערך בגודל 
\begin_inset Formula $k$
\end_inset

 מתבצעת ב
\begin_inset Formula $O(k)$
\end_inset

.
 
\end_layout

\begin_layout Standard
נמצא את סיבוכיות הזמן המשוערכת.
 
\end_layout

\begin_layout Standard
בהנחה בה
\begin_inset Quotes erd
\end_inset

כ כי התור ריק לפני הפעלת הסדרה, לאחר 
\begin_inset Formula $m$
\end_inset

 הכנסות לתור האנשים, התור יתמלא 
\begin_inset Formula $\lfloor\frac{m}{k}\rfloor$
\end_inset

 פעמים.
 לכן, מתוך 
\begin_inset Formula $m$
\end_inset

 פעולות, 
\begin_inset Formula $m-\lfloor\frac{m}{k}\rfloor$
\end_inset

 מתוכן יהיו הכנסה רגילה למערך ב 
\begin_inset Formula $O(1)$
\end_inset

 ו 
\begin_inset Formula $\lfloor\frac{m}{k}\rfloor$
\end_inset

 יהיו הכנסה למערך וביצוע פעולת 
\begin_inset Formula $Make\ Heap$
\end_inset

 ב
\begin_inset Formula $O(k)$
\end_inset

.
 
\end_layout

\begin_layout Standard
לכן:
\begin_inset Formula 
\[
Total\ Time=\left(m-\lfloor\frac{m}{k}\rfloor\right)\cdot O(1)+\lfloor\frac{m}{k}\rfloor\cdot O(k)\leq m\cdot O(1)+\frac{m}{k}\cdot O(k)=O(m)+O(m)=O(m)
\]

\end_inset

 הראנו כי כל סדרה של 
\begin_inset Formula $m$
\end_inset

 פעולות 
\begin_inset Formula $AddToQueue$
\end_inset

 רצה בזמן כולל של 
\begin_inset Formula $O(m\cdot1)$
\end_inset

 ולכן הפעולה 
\begin_inset Formula $AddToQueue$
\end_inset

 רצה בסיבוכיות 
\begin_inset Formula $O(1)$
\end_inset

 משוערך.
\end_layout

\begin_layout Standard
\begin_inset Formula $CallNext()$
\end_inset

 - מוציאה את האיבר המקסימלי מ
\begin_inset Formula $waiting\_room$
\end_inset

, שהוא 
\begin_inset Formula $max\ heap$
\end_inset

.
 לפי הנלמד, עבור ערימה בה 
\begin_inset Formula $k$
\end_inset

 איברים פעולה זו תתבצע ב
\begin_inset Formula $O(log(k))$
\end_inset

.
 אם 
\begin_inset Formula $waiting\_room$
\end_inset

 ריק, הפעולה תקבע אותו להצביע על האיבר הראשון בתור 
\begin_inset Formula $line$
\end_inset

 ואז תסיר אותו מהתור.
 אם בתור 
\begin_inset Formula $line$
\end_inset

 יש רק איבר אחד, זהו המערך האחרון ויש בו פחות מ
\begin_inset Formula $k$
\end_inset

 אנשים כיוון שברגע שמתווסף האדם ה
\begin_inset Formula $k$
\end_inset

, נוצר איבר חדש בתור עבור האנשים הבאים.
 במקרה זה יש פחות מ
\begin_inset Formula $k$
\end_inset

 אנשים המחכים למתקן והפעולה תיכשל.
\end_layout

\begin_layout Subsection*
)ב(
\end_layout

\begin_layout Standard
נניח בשלילה כי קיים מימוש של 
\begin_inset Formula $CallNext$
\end_inset

 הפועל בסיבוכיות 
\begin_inset Formula $O(loglogk)$
\end_inset

 מבלי לשנות את שאר הפעולות.
 
\end_layout

\begin_layout Standard
נסתכל על סדרת פעולות שמורכבת מאתחול המבנה עם פרמטר 
\begin_inset Formula $k$
\end_inset

 מסויים, הוספת 
\begin_inset Formula $k$
\end_inset

 אנשים לתור על ידי 
\begin_inset Formula $k$
\end_inset

 קריאות ל 
\begin_inset Formula $AddToQueue$
\end_inset

, והוצאת 
\begin_inset Formula $k$
\end_inset

 אנשים מחדר ההמתנה על ידי 
\begin_inset Formula $k$
\end_inset

 קריאות ל 
\begin_inset Formula $CallNext$
\end_inset

.
\end_layout

\begin_layout Standard
לפי דרישות השאלה, במהלך פעולות אלו, בהכרח מתבצע מיון של גבהי האנשים שכן
 הם נקראים לפי הסדר על ידי 
\begin_inset Formula $CallNext$
\end_inset

.
 בנוסף, כיוון שלא ידוע מראש מידע על הקלט, מיון זה מבוסס השוואות.
 
\end_layout

\begin_layout Standard
כידוע, המיון חייב להתבצע בסיבוכיות 
\begin_inset Formula $\Omega(klogk)$
\end_inset

.
\end_layout

\begin_layout Standard
כיוון ש
\begin_inset Formula $AddToQueue$
\end_inset

 לא משתנה ופועלת בסיבוכיות 
\begin_inset Formula $O(1)$
\end_inset

 משוערך, מהגדרת סיבוכיות משוערכת נובע כי 
\begin_inset Formula $k$
\end_inset

 קריאות ל
\begin_inset Formula $AddToQueue$
\end_inset

 יתבצעו בסיבוכיות של 
\begin_inset Formula $O(k)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $k$
\end_inset

 קריאות ל
\begin_inset Formula $CallNext$
\end_inset

 תחת ההנחה יתבצעו ב 
\begin_inset Formula $O(kloglogk)$
\end_inset

.
\end_layout

\begin_layout Standard
נראה כי 
\begin_inset Formula $kloglogk=o(klogk)$
\end_inset

.
 מההגדרה
\begin_inset Formula 
\[
\lim_{k\to\infty}\frac{kloglogk}{klogk}=\lim_{k\to\infty}\frac{loglogk}{logk}
\]

\end_inset

 המכנה והמונה שניהם שואפים ל 
\begin_inset Formula $\infty$
\end_inset

 כאשר 
\begin_inset Formula $k\to\infty$
\end_inset

 ולכן לפי לופיטל
\begin_inset Formula 
\[
=\lim_{k\to\infty}\frac{\frac{1}{\ln2}\cdot\frac{1}{logk}\cdot\frac{1}{k}}{\frac{1}{k}}=\lim_{k\to\infty}\frac{1}{\ln2}\cdot\frac{1}{logk}=0
\]

\end_inset

 לכן 
\begin_inset Formula $\lim_{k\to\infty}\frac{kloglogk}{klogk}=0$
\end_inset

 כלומר סדרת הפעולות תתבצע ב 
\begin_inset Formula $o(klogk)$
\end_inset

.
\end_layout

\begin_layout Standard
אילו המיון היה מתבצע בסיבוכיות 
\begin_inset Formula $\Omega(klogk)$
\end_inset

, היו קיימים 
\begin_inset Formula $c,k_{0}>0$
\end_inset

 כך שלכל 
\begin_inset Formula $k>k_{0}$
\end_inset

 היה מתקיים
\begin_inset Formula 
\[
kloglogk\geq c\cdot klogk
\]

\end_inset

 אבל אז במקרה זה, עבור 
\begin_inset Formula $k>k_{0}$
\end_inset

:
\begin_inset Formula 
\[
\frac{kloglogk}{klogk}\geq c>0
\]

\end_inset

 ולכן :
\begin_inset Formula 
\[
\lim_{k\to\infty}\frac{kloglogk}{klogk}\neq0
\]

\end_inset

 בסתירה למה שמצאנו.
 לכן המיון מתבצע בסיבוכיות של פחות מ
\begin_inset Formula $\Omega(klogk)$
\end_inset

 בסתירה לחסם התחתון הידוע על אלגוריתמי מיון.
\end_layout

\begin_layout Standard
כלומר, לא קיים מימוש של 
\begin_inset Formula $CallNext$
\end_inset

 המתבצע ב 
\begin_inset Formula $O(loglogk)$
\end_inset

 בלי שינוי של שאר הפעולות.
\end_layout

\begin_layout Subsection*
\begin_inset CommandInset include
LatexCommand include
filename "../../../../../Program Files (x86)/LyX 2.3/Resources/templates/MacrosHeb.lyx"

\end_inset


\end_layout

\begin_layout Section*
שאלה
\family roman
\series bold
\shape up
\size larger
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\numeric on
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
5
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
ב
\begin_inset Formula $init$
\end_inset

 ליצור עץ 
\begin_inset Formula $suffix$
\end_inset

 לכל מחרוזת.
 לעבור על כל העצים ולכל 
\begin_inset Formula $suffix$
\end_inset

 - לשמור בה כמה פעמים היא מופיעה בכל העץ.
 ניתן לשמור 
\begin_inset Formula $trie$
\end_inset

 נפרד )לבדיוק סיבוכיות
\begin_inset Formula $ $
\end_inset

( ואז לעבור על כל תת מחרוזת אפשרית ולהוסיף לה לקאונט כל פעם שרואים אותה.
 אחר כך זה פשוט עניין של לעבור על אותו 
\begin_inset Formula $trie$
\end_inset

 איכשהו..
\end_layout

\end_inset


\end_layout

\begin_layout Standard
נשתמש בעץ סיומות מוכלל לכל המחרוזות, כך שכל צומת תסומן במספר המחרוזות המקוריות
 בהן מופיעה תת המחרוזת שמתחילה על ידה.
\end_layout

\begin_layout Standard

\series bold
\bar under
המבנה יכלול את השדות:
\end_layout

\begin_layout Standard
\begin_inset Formula $suffix$
\end_inset

 - עץ סיומות שיהווה עץ מוכלל לכל המחרוזות הנתונות.
\end_layout

\begin_layout Standard

\series bold
\bar under
המבנה יכלול את הפעולות הבאות:
\end_layout

\begin_layout Standard
\begin_inset Formula $Init(DNAs)$
\end_inset

: נבנה עץ סיומות מוכלל באופן הנראה בהרצאה - נאחד את כל המחרוזות לכדי מחרוזת
 אחת ב
\begin_inset Formula $O(S)$
\end_inset

, כך שלאחר המחרוזת ה 
\begin_inset Formula $i$
\end_inset

 שמתווספת נוסיף תו 
\begin_inset Formula $\$_{i}$
\end_inset

 ייחודי לה.
 לאחר מכן נבנה עץ סיומות למחרוזת החדשה באמצעות אלגוריתם הקופסה השחורה.
 בהינתן שהמחרוזות אינן ריקות, אורך המחרוזת החדשה הוא 
\begin_inset Formula $O(S+n)=O(S)$
\end_inset

 
\end_layout

\begin_layout Standard
ולכן בניית עץ הסיומות תתבצע ב
\begin_inset Formula $O(S)$
\end_inset

.
 
\end_layout

\begin_layout Standard
כעת נסייר על עץ הסיומות שנבנה ונקצץ כפי שנלמד בהרצאה את כל תתי העצים מתחת
 לקשתות שהתווית שלהן מכילה 
\begin_inset Formula $\$_{i}$
\end_inset

, עבור כל 
\begin_inset Formula $1\leq i\leq n-1$
\end_inset

, כיוון שהם מתארים תתי מחרוזות שלא נמצאות באף אחת מהמחרוזות אלא רק במחרוזת
 המאוחדת.
 סיור על עץ הסיומות מתבצע ב
\begin_inset Formula $O(S)$
\end_inset

.
\end_layout

\begin_layout Standard
כעת נעבור על כל העץ רקורסיבית - כלומר מלמטה למעלה.
 לכל צומת נצמיד מערך בוליאני 
\begin_inset Formula $children$
\end_inset

 בגודל 
\begin_inset Formula $n$
\end_inset

, כך שהאינדקס ה
\begin_inset Formula $i$
\end_inset

 מכיל 
\begin_inset Formula $true$
\end_inset

 אם ורק אם בתת העץ ששורשו הוא הצומת הנוכחית קיימת סיומת של המחרוזת ה
\begin_inset Formula $i$
\end_inset

 במערך 
\begin_inset Formula $DNAs$
\end_inset

.
 עבור בנים עלים של כל צומת - נוסיף 
\begin_inset Formula $true$
\end_inset

 עבור כל המחרוזות אליהן שייכים העלים כיוון שכל עלה מייצג סיומת של מחרוזת
 אחת בלבד.
 עבור בנים שאינם עלים, נוסיף למערך ה
\begin_inset Formula $children$
\end_inset

 של האב 
\begin_inset Formula $true$
\end_inset

 בכל אינדקס בו יש 
\begin_inset Formula $true$
\end_inset

 במערך ה
\begin_inset Formula $children$
\end_inset

 של אחד מבניו.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
בנוסף, נוסיף לכל צומת את מספר הצמתים בתת העץ שצומת זה הוא שורשו, באופן זהה
 לזה שנלמד על עצי דרגות.
 מכיוון שהעץ המתקבל על ידי אלגוריתם הקופסה השחורה הוא דחוס, כל תו ברצף של
 תווים ייחשב כ
\begin_inset Quotes erd
\end_inset

בן
\begin_inset Quotes erd
\end_inset

 לצורך הספירה.
 במעבר מבן לאב, אם מספר ערכי 
\begin_inset Formula $true$
\end_inset

 של הבן הוא לפחות 
\begin_inset Formula $min\_count$
\end_inset

, כלומר יש לפחות 
\begin_inset Formula $min\_count$
\end_inset

 חיות 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
בכל צומת יישמר גם מערך 
\begin_inset Formula $child\_lengths$
\end_inset

.
 לכל 
\begin_inset Formula $1\leq i\leq n$
\end_inset

, 
\begin_inset Formula $child\_lengths[i]$
\end_inset

 יכלול את אורך המסלול המקסימלי שלאורכו לכל צומת יש לפחות 
\begin_inset Formula $i$
\end_inset

 אינדקסים ב
\begin_inset Formula $children$
\end_inset

 שהם 
\begin_inset Formula $true$
\end_inset

 , כלומר שתת המחרוזת שמיוצגת על ידי תת העץ ששורשו הוא הצומת הנוכחי נמצאת
 בלפחות 
\begin_inset Formula $i$
\end_inset

 חיות.
\end_layout

\begin_layout Standard
כיוון שאנחנו עוברים על העץ מלמטה למעלה, נחשב את אורך המסלול באופן המזכיר
 עץ דרגות - עבור כל צומת, נבדוק כמה ערכי 
\begin_inset Formula $true$
\end_inset

 יש ב
\begin_inset Formula $children$
\end_inset

.
 אם יש לפחות 
\begin_inset Formula $i$
\end_inset

, נשמור בצומת ב
\begin_inset Formula $child\_lengths[i-1]$
\end_inset

 את הערך המקסימלי בין ערכי 
\begin_inset Formula $child\_lengths[i-1]$
\end_inset

 של כל בניו ועוד אורך המחרוזת המיוצגת על ידי הקשת לצומת הנוכחי.
\end_layout

\begin_layout Standard
בכל מעבר מבן לאב, נשווה את ערך 
\begin_inset Formula $child\_lengths[i-1]$
\end_inset

 של הבן למשתנה עזר באב כדי למצוא את 
\begin_inset Formula $child\_lengths[i-1]$
\end_inset

 המקסימלי בין כל בניו של האב, עבור כל 
\begin_inset Formula $i$
\end_inset

.
 באב ישמר מערך 
\begin_inset Formula $max\_index$
\end_inset

 כך שב
\begin_inset Formula $max\_index[i-1]$
\end_inset

 ישמר האינדקס בא
\begin_inset Quotes erd
\end_inset

ב של הבן בעל 
\begin_inset Formula $child\_lengths[i-1]$
\end_inset

 הכי גדול.
 אם לא קיים מסלול המשותף ללפחות 
\begin_inset Formula $i$
\end_inset

 צמתים, ב
\begin_inset Formula $max\_index[i-1]$
\end_inset

 יישמר 
\begin_inset Formula $-1$
\end_inset

.
\end_layout

\begin_layout Standard
עוברים על כל העץ, שצמתיו הן ב
\begin_inset Formula $O(S)$
\end_inset

.
 לכל צומת, מבצעים מספר קבוע של מעברים על המערכים 
\begin_inset Formula $children,child\_lengths$
\end_inset

 בגודל 
\begin_inset Formula $n$
\end_inset

 ומבצעים פעולות השמה והשוואה ב
\begin_inset Formula $O(1)$
\end_inset

.
 כלומר, בכל צומת מבצעים 
\begin_inset Formula $O(n)$
\end_inset

 פעולות ולכן בסך הכל הפעולה תרוץ ב 
\begin_inset Formula $O(n\cdot S)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $GetLongestRep(p)$
\end_inset

: נגדיר ראשית את 
\begin_inset Formula $min\_count$
\end_inset

 להיות מספר החיות המינימלי שנרצה שתת המחרוזת תופיע בהן.
 יוגדר להיות 
\begin_inset Formula $\lceil n\cdot p\rceil$
\end_inset

.
 זה יהיה מספר בין 
\begin_inset Formula $1$
\end_inset

 ל
\begin_inset Formula $n$
\end_inset

.
 ולכן יהיה לו אינדקס תואם ב
\begin_inset Formula $max\_index$
\end_inset

 של כל צומת.
 מהשורש של 
\begin_inset Formula $suffix$
\end_inset

, פשוט נעבור בכל שלב לצומת שאינדקסו שמור ב
\begin_inset Formula $max\_index[min\_count]$
\end_inset

 של הצומת הנוכחי, עד שנגיע לצומת בו 
\begin_inset Formula $max\_index[min\_count]==-1$
\end_inset

.
 ברגע זה נסיים את הריצה ונחזיר את המחרוזת שבנינו עד עכשיו מהמסלול.
 כיוון שעוברים רק על הצמתים הרלוונטיים למחרוזת, הפעולה תתבצע ב 
\begin_inset Formula $O(S_{p})$
\end_inset

.
\end_layout

\end_body
\end_document
